# @summary configure a munin master
#
# @see http://guide.munin-monitoring.org/en/latest/
#
# @example Basic usage
#   include munin::master
#
# @example With TLS
#   class { 'munin::master':
#     tls             => 'enabled',
#     tls_certificate => '/path/to/tls/certificate',
#     tls_private_key => '/path/to/tls/key',
#   }
#
# The munin master will install munin, and collect all exported munin
# node definitions as files into /etc/munin/munin-conf.d/.
#
# Parameters:
#
# @param node_definitions
#
#   A hash of node definitions used by create_resources to make static
#   node definitions.
#
# @param host_name
#
#   A host name for this munin master, matched with
#   munin::node::mastername for collecting nodes. Defaults to $::fqdn
#
#   This is used for collecting **munin::master::node_definition**
#   resources exported by nodes using the **munin::node** class.
#
# @param graph_strategy
#
#   Controls if munin-graph graphs all services ('cron') or if
#   graphing is done by munin-cgi-graph (which must configured
#   seperatly)
#
# @param html_strategy
#
#   Controls if munin-html will recreate all html pages every run
#   interval ('cron') or if html pages are generated by
#   munin-cgi-graph (which must configured seperatly). Defaults to
#   "cgi".
#
# @param config_root
#
#   The root directory of the munin master configuration. Default:
#   /etc/munin on most platforms.
#
# @param file_group
#
#   The group name for configuration file permissions.
#
# @param collect_nodes
#
#   Controls which nodes to collect.
#
#   'enabled' (default) makes the munin master collect all exported
#   node_definitions.
#
#   'disabled' disables collection.
#
#   'mine' makes the munin master collect nodes matching the
#   $host_name parameter.
#
#  'unclaimed' makes the munin master collect nodes not tagged with a
#   host name.
#
#   This is used for collecting **munin::master::node_definition**
#   resources exported by nodes using the **munin::node** class.
#
# @param dbdir
#
#   Path to the munin dbdir, where munin stores everything.
#
# @param htmldir
#
#   Path to where munin will generate HTML documents and graphs, used
#   if graph_strategy is cron.
#
# @param rundir
#
#   Path to directory munin uses for pid and lock files.
#
# @param logdir
#
#   Path to directory munin uses for log files.
#
# @param package_name
#
#   The package name used for installing the munin master.
#
# @param tls
#
#   Controls the use of TLS globally for master to node
#   communications. Default 'disabled'.
#
# @param tls_certificate
#
#   Path to a file containing a TLS certificate. No default. Required
#   if tls is enabled.
#
# @param tls_private_key
#
#   Path to a file containing a TLS key. No default. Required if tls
#   is enabled.
#
# @param tls_verify_certificate
#
#   If TLS is used, verify the certificate. Defaults to 'yes'.
#
# @param extra_config
#
#   Extra lines of config to put in munin.conf.
#
class munin::master (
  Hash                                             $node_definitions,
  Enum['cgi', 'cron']                              $graph_strategy,
  Enum['cgi', 'cron']                              $html_strategy,
  Stdlib::Absolutepath                             $config_root,
  Enum['enabled', 'disabled', 'mine', 'unclaimed'] $collect_nodes,
  Optional[Stdlib::Absolutepath]                   $dbdir,
  Optional[Stdlib::Absolutepath]                   $htmldir,
  Optional[Stdlib::Absolutepath]                   $logdir,
  Optional[Stdlib::Absolutepath]                   $rundir,
  Enum['enabled', 'disabled']                      $tls,
  Stdlib::Absolutepath                             $tls_certificate,
  Stdlib::Absolutepath                             $tls_private_key,
  Enum['yes','no']                                 $tls_verify_certificate,
  Stdlib::Host                                     $host_name,
  String                                           $file_group,
  Variant[String,Array[String]]                    $package_name,
  Array[String]                                    $extra_config,
) {

  include munin::package

  File {
    owner   => 'root',
    group   => $file_group,
    mode    => '0644',
    require => Package[$package_name],
  }

  file { "${config_root}/munin.conf":
    content => template('munin/munin.conf.erb'),
  }

  file { "${config_root}/munin-conf.d":
    ensure  => directory,
    recurse => true,
    purge   => true,
    force   => true,
  }

  if ($collect_nodes == 'enabled') {
    class { '::munin::master::collect':
      collect_nodes => $collect_nodes,
      host_name     => $host_name,
    }
  }

  # Create static node definitions
  if $node_definitions {
    create_resources(munin::master::node_definition, $node_definitions, {})
  }
}
